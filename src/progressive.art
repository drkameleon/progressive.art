;===============================================
; Progressive.art
;
; A customizeable, text-based 
; progress bar generator & library
; for Arturo
;
; MIT License
; (c) 2024 Yanis Zafir√≥pulos
;-----------------------------------------------
; @file src/progressive.art
;===============================================

import ./"progressbar"!

define :progressive [

    ;---------------------------
    ; Templates
    ;---------------------------

    initializeProgressBar: [
        maxLim: new \getMaxValue coll
        if and? [block? prm][1 < prmSize: <= size prm] ->
            'maxLim / prmSize

        \progressbar: to :progressbar @[maxLim]!
    ]

    internalFunctions: [
        processing: function [what][
            \progressbar\processing: to :string what
        ]
    ]
    
    mainLooper: [
        coll prm [
            do blk
            \progressbar\increase 1
        ]
        if \progressbar\active? ->
            \progressbar\stop
    ]

    ;---------------------------
    ; Helpers
    ;---------------------------

    getMaxValue: function [collection][
        getCollectionParamSize: function [c][
            (integer? c)? -> c
                          -> size c
        ]

        unless literal? collection ->
            return getCollectionParamSize collection

        return getCollectionParamSize var collection
    ]

    ;---------------------------
    ; Private methods
    ;---------------------------

    executeIterator: method [iter :literal][
        do \initializeProgressBar
        return \internalFunctions ++ 
               (@[to :word iter]) ++ 
                      \mainLooper
    ]

    ;---------------------------
    ; Public methods
    ;---------------------------

    new: method [maximumValue :integer][
        to :progressbar @[maximumValue]
    ]

    loop: method [coll, prm, blk][
        do \executeIterator 'loop
    ]

    map: method [coll, prm, blk][
        do \executeIterator 'map
    ]
    
    select: method [coll, prm, blk][
        do \executeIterator 'select
    ]

    filter: method [coll, prm, blk][
        do \executeIterator 'filter
    ]
]

;---------------------------
; The main access point
; = a singleton!
;---------------------------

progressive: to :progressive []!
