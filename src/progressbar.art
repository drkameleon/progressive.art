;===============================================
; Progressive.art
;
; A customizeable, text-based 
; progress bar generator & library
; for Arturo
;
; MIT License
; (c) 2024 Yanis Zafirópulos
;-----------------------------------------------
; @file src/progressBar.art
;===============================================

define :progressbar [
    ;---------------------------
    ; Constructor
    ;---------------------------

    init: method [maxValue :integer][
        \current: 0
        \maxValue: maxValue

        \run: 0
        \animations: ["-", "\\", "|", "/", "-", "\\", "|", "/"]
        \animated?: not? null? attr 'animated
        \hasDetails?: null? attr 'noDetails
        \hasBar?: null? attr 'noBar

        \label: (lbl: <= attr 'label)? -> lbl -> "Downloading:"
        \processing: ""

        \barBefore: (bab: <= attr 'barBefore)? -> bab -> ""
        \barAfter: (baf: <= attr 'barAfter)? -> baf -> ""
        \onMark: (onm: <= attr 'onMark)? -> onm -> "▓"
        \onColor: (onc: <= attr 'onColor)? -> onc -> #white
        \offMark: (offm: <= attr 'offMark)? -> offm -> "░"
        \offColor: (offc: <= attr 'offColor)? -> offc -> #white
        \persistent?: not? null? attr 'persistent
        \width: (wdt: <= attr 'width)? -> wdt -> 0

        \startTime: to :integer now
        \active?: true

        if not? null? attr 'plain [
            \onMark: "="
            \offMark: " "
            \barBefore: "["
            \barAfter: "]"
        ]

        cursor false
    ]

    ;---------------------------
    ; Helpers
    ;---------------------------

    colored: function [col, str][
        (col = #white)? -> str
                        -> color col str
    ]

    ;---------------------------
    ; Private methods
    ;---------------------------

    lineWidth: method [][
        (\width = 0)? -> terminal\width
                      -> \width
    ]

    goBack: method [][
        prints repeat "\b" \lineWidth * enumerate @[\hasDetails? \hasBar?] => [&]
    ]

    cleanUp: method [][
        prints repeat " " \lineWidth * enumerate @[\hasDetails? \hasBar?] => [&]
    ]

    friendlyTime: method [num][
        if num = 0 -> return "< 1s"
        if num < 60 -> return ~"~ |num|s"
        if num = 60 -> return "< 1min"
        if num < 60*60 -> return ~"~ |num / 60|min |num % 60|s"
        if num = 60*60 -> return "< 1h"
        
        hours: num / 60*60
        rest: num % 60*60
        mins: rest / 60
        secs: rest % 60
        return ~"~ |hours|h |mins|min |secs|s"
    ]

    showDetailLine: method [][
        prints (not? \hasDetails?)? -> "" [
            currentlyProcessed: ""
            if not? empty? \processing ->
                currentlyProcessed: ~"➔ |\processing|"
            dtlText: ~{|\current|/|\maxValue| |currentlyProcessed|}
            timeUpToNow: (to :integer now) - \startTime
            remaining: ((\maxValue - \current) * timeUpToNow) / \current
            remaining: (\friendlyTime remaining) ++ " left"
            (not? \hasBar?)? 
                [
                    pcent: pad.left (to :string .format:".1f" round.to: 1 (\current * 100) // \maxValue) ++ "%" 6
                    (repeat " " (\animated? ? -> 2 -> 0) + 1) ++ \label ++ " " ++ color #gray dtlText ++ (pad.left remaining \lineWidth - sum @[2 + size \label, size dtlText, (\animated? ? -> 2 -> 0), 8]) ++ " " ++ color #green pcent
                ]
                -> (repeat " " (\animated? ? -> 2 -> 0) + 2 + size \label) ++ color #gray dtlText ++ (pad.left remaining \lineWidth - sum @[2 + size \label, size dtlText, (\animated? ? -> 2 -> 0), 8]) ++ repeat " " 8
        ]
    ]

    showBarLine: method [][
        (not? \hasBar?)? -> prints "" [
            pcent: pad.left (to :string .format:".1f" round.to: 1 (\current * 100) // \maxValue) ++ "%" 6
            spaceAvailable: \lineWidth - sum @[inc size \label, size pcent, 3, \animated? ? -> 2 -> 0, size \barBefore, size \barAfter]

            ons: (\current * spaceAvailable) / \maxValue
            offs: spaceAvailable - ons

            bar: \barBefore ++ (\colored \onColor repeat \onMark ons) ++ (\colored \offColor repeat \offMark offs) ++ \barAfter

            pr: \animations\[\run % 8]
            prints [(\animated? ? -> " " ++ pr -> "") ++ " " ++ color.bold #white \label bar color #green pcent]
        ]
    ]

    showFinalLine: method [][
        prints " " ++ (color.bold #white \label) ++ " " ++ "Completed in " ++ (\friendlyTime (to :integer now) - \startTime) ++ " " ++ color #green "✔"
        ;print \friendlyTime (to :integer now) - \startTime
    ]

    ;---------------------------
    ; Public methods
    ;---------------------------

    increase: method [q :integer :floating][
        \current: \current + q
        if \animated? -> \run: \run + 1

        \goBack
        \showDetailLine
        \showBarLine

        if \current >= \maxValue [
            \active?: false
            \stop
        ]
    ]

    stop: method [][
        if not? \persistent? [
            \goBack
            \cleanUp
            \goBack
            \showFinalLine
        ]
        print ""
        cursor true
    ]
]