;===============================================
; Progressive.art
;
; A customizeable, text-based 
; progress bar generator & library
; for Arturo
;
; MIT License
; (c) 2024 Yanis Zafirópulos
;-----------------------------------------------
; @file src/progressBar.art
;===============================================

define :progressbar [
    ;---------------------------
    ; Style templates
    ;---------------------------

    defaultStyle:   to :block read ./"styles/default.art"
    plainStyle:     to :block read ./"styles/plain.art"
    fancyStyle:     to :block read ./"styles/fancy.art"

    ;---------------------------
    ; Constructor
    ;---------------------------

    init: method [maxValue :integer][
        ; initialize values
        \current: 0
        \maxValue: maxValue
        \run: 0

        ; initialize settings
        \label:             (lbl: <= attr 'label)?          -> lbl -> "Downloading:"
        \timeLeftLabel:     (tll: <= attr 'timeLeftLabel)?  -> tll -> "left"
        \timeTakenLabel:    (ttl: <= attr 'timeTakenLabel)? -> ttl -> "Completed in"
        \processing:        ""
        \animated?:         true

        ; initialize style
        do \defaultStyle

        if attr 'plain -> do \plainStyle
        if attr 'fancy -> do \fancyStyle

        if bab: <= attr 'barBefore      -> \barBefore:      bab
        if baf: <= attr 'barAfter       -> \barAfter:       baf
        if onm: <= attr 'onMark         -> \onMark:         onm
        if onc: <= attr 'onColor        -> \onColor:        onc
        if ofm: <= attr 'offMark        -> \offMark:        ofm
        if ofc: <= attr 'offColor       -> \offColor:       ofc
        if lac: <= attr 'labelColor     -> \labelColor:     lac
        if dtc: <= attr 'detailColor    -> \detailColor:    dtc

        \animated?:     null? attr 'static
        \hasBar?:       null? attr 'counter
        \hasRatio?:     null? attr 'ratioless

        \hasDetails?:   null? attr 'simple
        \persistent?:   not? null? attr 'persist
        \hide?:         not? null? attr 'hide

        \animationSize:     \animated? ? -> inc size first \animations
                                         -> 0
        \percentageSize:    (and? \persistent? \hasBar?)? -> 6 -> 5

        ; let's start
        \startTime: to :integer now
        \active?: true

        ; hide the cursor
        cursor false
    ]

    ;---------------------------
    ; Helpers
    ;---------------------------

    width: function [][
       terminal\width
    ]

    space: function [spacelen][
        repeat " " spacelen
    ]
    
    neat: function [strblk][
        join.with:" " @ strblk
    ]

    colored: function [col, str][
        (col = #white)? -> str
                        -> color col str
    ]

    friendlyTime: function [num][
        if num = 0      -> return "< 1s"
        if num < 60     -> return ~"~ |num|s"
        if num = 60     -> return "< 1min"
        if num < 60*60  -> return ~"~ |num / 60|min |num % 60|s"
        if num = 60*60  -> return "< 1h"
        
        [hours,rest]    : divmod num 60*60
        [mins,secs]     : divmod rest 60 

        return ~"~ |hours|h |mins|min |secs|s"
    ]

    ;---------------------------
    ; Private methods
    ;---------------------------

    goBack: method [][
        prints repeat "\b" \width * enumerate @[\hasDetails? \hasBar?] => [&]
    ]

    cleanUp: method [][
        \goBack
        prints \space \width * enumerate @[\hasDetails? \hasBar?] => [&]
        \goBack
    ]

    timeLeft: method [][
        timeUpToNow: (to :integer now) - \startTime
        remaining: div (\maxValue - \current) * timeUpToNow \current
        return \neat [
            \friendlyTime remaining
            \timeLeftLabel
        ]
    ]

    timeTaken: method [][
        timeUpToNow: (to :integer now) - \startTime
        return \neat [
            \timeTakenLabel
            replace \friendlyTime timeUpToNow "~ " ""
        ]
    ]

    animation: method [][
        unless \active? -> return color #green " ✔"
        \animated? ? -> " " ++ \animations\[\run % size \animations] 
                     -> ""
    ]

    percentage: method [][
        pad.left (to :string .format:".1f" round.to: 1 (\current * 100) // \maxValue) ++ "%" \percentageSize
    ]

    detailLine: method [][
        if not? \hasDetails? -> return ""

        dtlText: (\hasRatio? ? -> ~"|\current|/|\maxValue| ➔ " -> "") ++ \processing

        (not? \hasBar?)? 
            -> \neat [
                \animation
                \label
                color \detailColor dtlText
                pad.left \timeLeft \width - sum @[2 + size \label, size dtlText, \animationSize, 8]
                color #green \percentage
            ]
            -> \neat [
                \space \animationSize + 1 + (size \label) + size \barBefore
                color \detailColor dtlText
                pad.left \timeLeft \width - sum @[2 + size \label, size dtlText, \animationSize, \percentageSize + 1, size \barBefore, size \barAfter, 2]
                \space 1 + \percentageSize + size \barAfter
            ]
    ]

    barSize: method [][
        \width - sum @[
            \animationSize
            inc size \label
            size \barBefore
            size \barAfter
            inc \percentageSize
            2 ; head-tail adjument
        ]
    ]

    bar: method [][
        ons: (\current * \barSize) / \maxValue
        offs: \barSize - ons

        join @[
            color \labelColor \barBefore
            \colored \onColor repeat \onMark ons
            \colored \offColor repeat \offMark offs
            color \labelColor \barAfter
        ]
    ]

    barLine: method [][
        if not? \hasBar? -> return ""

        return \neat [
            \animation
            color.bold \labelColor \label
            \bar
            color #green \percentage
        ]
    ]

    finalComplete: method [][
        if not? \hasDetails? -> return ""
        (color \detailColor pad.left \timeTaken (sum @[
            \animationSize
            inc size \label
            size \barBefore
            1
        ]) + \barSize) ++ 
        (\space 2 + \percentageSize + size \barAfter) ++ 
        ;((color \detailColor pad.left \timeTaken \width - sum @[(size \label), 2, size \barBefore, size \barAfter]) ++ \space 8 + size \barAfter) ++
        \barLine
    ]

    finalMinimalist: method [][
        " " ++ \neat 
            rotate @[
                color.bold \labelColor \label
                \timeTaken
                color #green "✔"
            ] \animated? ? -> 2 -> 0
    ]

    ;---------------------------
    ; Public methods
    ;---------------------------

    increase: method [q :integer :floating][
        \current: \current + q
        if \animated? -> \run: \run + 1

        \goBack
        prints \detailLine
        prints \barLine

        if \current >= \maxValue [
            \active?: false
            \stop
        ]
    ]

    stop: method [][
        \cleanUp
        unless \hide? [
            print (and? \persistent? \hasBar?)?
                -> \finalComplete
                -> \finalMinimalist
        ]
        \active?: false
        cursor true
    ]
]